{"version":3,"sources":["../../src/component/AudioAnalyser/MediaRecorder.js"],"names":["convertWav","WebWorker","MediaRecorderFn","constraints","audio","mp3Worker","Worker","props","startAudio","recorder","MediaRecorderClass","mediaRecorder","state","navigator","mediaDevices","getUserMedia","then","recordAudio","stream","catch","checkAndExecFn","errorCallback","err","resumeAudio","pauseAudio","pause","onpause","pauseCallback","audioCtx","suspend","stopAudio","audioType","audioOptions","includes","stop","onstop","audioStream2Blob","stopCallback","audioChunk","initCanvas","compatibility","analyser","createAnalyser","audioBitsPerSecond","mimeType","MediaRecorder","ondataavailable","event","push","data","resume","start","onstart","e","startCallback","onresume","onerror","source","createMediaStreamSource","connect","renderCurve","promisifiedOldGUM","webkitGetUserMedia","mozGetUserMedia","Promise","reject","Error","resolve","call","undefined","fn","type","cb","wavBlob","chunk","audioWav","fr","FileReader","readAsArrayBuffer","Blob","frOnload","buffer","target","result","decodeAudioData","DataView","onload","audioMp3","wavBuf","postMessage","cmd","config","bitRate","rawInput","onmessage","mp3Blob","buf","Target","window","AudioContext","webkitAudioContext"],"mappings":"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","file":"MediaRecorder.js","sourcesContent":["/**\r\n * @author j_bleach 2018/8/18\r\n * @describe 媒体记录（包含开始，暂停，停止等媒体流及回调操作）\r\n * @param Target 被装饰类（AudioAnalyser）\r\n */\r\nimport convertWav from \"./audioConvertWav\";\r\nimport WebWorker from \"./mp3worker.js\";\r\n\r\nconst MediaRecorderFn = Target => {\r\n    const constraints = {audio: true};\r\n    const mp3Worker = new Worker(WebWorker);\r\n    return class MediaRecorderClass extends Target {\r\n        static audioChunk = [] // 音频信息存储对象\r\n        static mediaRecorder = null // 媒体记录对象\r\n        static audioCtx = new (window.AudioContext || window.webkitAudioContext)(); // 音频上下文\r\n\r\n        constructor(props) {\r\n            super(props);\r\n            MediaRecorderClass.compatibility();\r\n            this.analyser = MediaRecorderClass.audioCtx.createAnalyser();\r\n        }\r\n\r\n        /**\r\n         * @author j_bleach 2018/08/02 17:06\r\n         * @describe 浏览器navigator.mediaDevices兼容性处理\r\n         */\r\n        static compatibility() {\r\n            const promisifiedOldGUM = (constraints) => {\r\n                // First get ahold of getUserMedia, if present\r\n                const getUserMedia =\r\n                    navigator.getUserMedia ||\r\n                    navigator.webkitGetUserMedia ||\r\n                    navigator.mozGetUserMedia;\r\n\r\n                // Some browsers just don't implement it - return a rejected promise with an error\r\n                // to keep a consistent interface\r\n                if (!getUserMedia) {\r\n                    MediaRecorderClass.checkAndExecFn(this.props.errorCallback);\r\n                    return Promise.reject(\r\n                        new Error(\"getUserMedia is not implemented in this browser\")\r\n                    );\r\n                }\r\n                // Otherwise, wrap the call to the old navigator.getUserMedia with a Promise\r\n                return new Promise(function (resolve, reject) {\r\n                    getUserMedia.call(navigator, constraints, resolve, reject);\r\n                });\r\n            };\r\n\r\n            // Older browsers might not implement mediaDevices at all, so we set an empty object first\r\n            if (navigator.mediaDevices === undefined) {\r\n                navigator.mediaDevices = {};\r\n            }\r\n\r\n            // Some browsers partially implement mediaDevices. We can't just assign an object\r\n            // with getUserMedia as it would overwrite existing properties.\r\n            // Here, we will just add the getUserMedia property if it's missing.\r\n            if (navigator.mediaDevices.getUserMedia === undefined) {\r\n                navigator.mediaDevices.getUserMedia = promisifiedOldGUM;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @author j_bleach 2018/8/19\r\n         * @describe 验证函数，如果存在即执行\r\n         * @param fn: function 被验证函数\r\n         * @param e: object 事件对象 event object\r\n         */\r\n        static checkAndExecFn(fn, e) {\r\n            typeof fn === \"function\" && fn(e)\r\n        }\r\n\r\n        /**\r\n         * @author j_bleach 2018/8/19\r\n         * @describe 音频流转blob对象\r\n         * @param type: string 音频的mime-type\r\n         * @param cb: function 录音停止回调\r\n         */\r\n        static audioStream2Blob(type, audioOptions, cb) {\r\n            let wavBlob = null;\r\n            const chunk = MediaRecorderClass.audioChunk;\r\n            const audioWav = () => {\r\n                let fr = new FileReader();\r\n                fr.readAsArrayBuffer(new Blob(chunk, {type}))\r\n                let frOnload = (e) => {\r\n                    const buffer = e.target.result\r\n                    MediaRecorderClass.audioCtx.decodeAudioData(buffer).then(data => {\r\n                        wavBlob = new Blob([new DataView(convertWav(data, audioOptions))], {\r\n                            type: \"audio/wav\"\r\n                        })\r\n                        MediaRecorderClass.checkAndExecFn(cb, wavBlob);\r\n                    })\r\n                }\r\n                fr.onload = frOnload\r\n            }\r\n            const audioMp3 = () => {\r\n                let fr = new FileReader();\r\n                fr.readAsArrayBuffer(new Blob(chunk, {type: \"audio/wav\"}))\r\n                let frOnload = (e) => {\r\n                    const buffer = e.target.result;\r\n                    MediaRecorderClass.audioCtx.decodeAudioData(buffer).then(data => {\r\n                        const wavBuf = convertWav(data, audioOptions)\r\n                        mp3Worker.postMessage({\r\n                            cmd: \"init\",\r\n                            config: {bitRate: 128}\r\n                        });\r\n                        mp3Worker.postMessage({cmd: \"encode\", rawInput: wavBuf});\r\n                        mp3Worker.postMessage({cmd: \"finish\"});\r\n\r\n                        mp3Worker.onmessage = (e) => {\r\n                            if (e.data.cmd == \"end\") {\r\n                                const mp3Blob = new Blob(e.data.buf, {type});\r\n                                MediaRecorderClass.checkAndExecFn(cb, mp3Blob);\r\n                            }\r\n                        };\r\n                    })\r\n                }\r\n                fr.onload = frOnload\r\n            }\r\n            switch (type) {\r\n                case \"audio/webm\":\r\n                    MediaRecorderClass.checkAndExecFn(cb, new Blob(chunk, {type}));\r\n                    break;\r\n                case \"audio/wav\":\r\n                    audioWav();\r\n                    break;\r\n                case \"audio/mp3\":\r\n                    audioMp3();\r\n                    break;\r\n                default:\r\n                    return void 0\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @author j_bleach 2018/8/18\r\n         * @describe 开始录音\r\n         */\r\n        startAudio = () => {\r\n            const recorder = MediaRecorderClass.mediaRecorder;\r\n            if (!recorder || (recorder && recorder.state === \"inactive\")) {\r\n                navigator.mediaDevices.getUserMedia(constraints).then(stream => {\r\n                    this.recordAudio(stream);\r\n                }).catch(err => {\r\n                        MediaRecorderClass.checkAndExecFn(this.props.errorCallback, err);\r\n                        // throw new Error(\"getUserMedia failed:\", err);\r\n                    }\r\n                )\r\n                return false\r\n            }\r\n            if (recorder && recorder.state === \"paused\") {\r\n                MediaRecorderClass.resumeAudio();\r\n            }\r\n        }\r\n        /**\r\n         * @author j_bleach 2018/8/19\r\n         * @describe 暂停录音\r\n         */\r\n        pauseAudio = () => {\r\n            const recorder = MediaRecorderClass.mediaRecorder;\r\n            if (recorder && recorder.state === \"recording\") {\r\n                recorder.pause();\r\n                recorder.onpause = () => {\r\n                    MediaRecorderClass.checkAndExecFn(this.props.pauseCallback);\r\n                }\r\n                MediaRecorderClass.audioCtx.suspend();\r\n            }\r\n        }\r\n        /**\r\n         * @author j_bleach 2018/8/18\r\n         * @describe 停止录音\r\n         */\r\n        stopAudio = () => {\r\n            const {audioType, audioOptions} = this.props;\r\n            const recorder = MediaRecorderClass.mediaRecorder;\r\n            if (recorder && [\"recording\", \"paused\"].includes(recorder.state)) {\r\n                recorder.stop();\r\n                recorder.onstop = () => {\r\n                    MediaRecorderClass.audioStream2Blob(audioType, audioOptions, this.props.stopCallback);\r\n                    MediaRecorderClass.audioChunk = []; // 结束后，清空音频存储\r\n                }\r\n                MediaRecorderClass.audioCtx.suspend();\r\n                this.initCanvas();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @author j_bleach 2018/8/18\r\n         * @describe mediaRecorder音频记录\r\n         * @param stream: binary data 音频流\r\n         */\r\n        recordAudio(stream) {\r\n            const {audioBitsPerSecond, mimeType} = this.props;\r\n            MediaRecorderClass.mediaRecorder = new MediaRecorder(stream, {audioBitsPerSecond, mimeType});\r\n            MediaRecorderClass.mediaRecorder.ondataavailable = (event) => {\r\n                MediaRecorderClass.audioChunk.push(event.data);\r\n            }\r\n            MediaRecorderClass.audioCtx.resume();\r\n            MediaRecorderClass.mediaRecorder.start();\r\n            MediaRecorderClass.mediaRecorder.onstart = (e) => {\r\n                MediaRecorderClass.checkAndExecFn(this.props.startCallback, e);\r\n            }\r\n            MediaRecorderClass.mediaRecorder.onresume = (e) => {\r\n                MediaRecorderClass.checkAndExecFn(this.props.startCallback, e);\r\n            }\r\n            MediaRecorderClass.mediaRecorder.onerror = (e) => {\r\n                MediaRecorderClass.checkAndExecFn(this.props.errorCallback, e);\r\n            }\r\n            const source = MediaRecorderClass.audioCtx.createMediaStreamSource(stream);\r\n            source.connect(this.analyser);\r\n            this.renderCurve(this.analyser);\r\n        }\r\n\r\n        /**\r\n         * @author j_bleach 2018/8/19\r\n         * @describe 恢复录音\r\n         */\r\n        static resumeAudio() {\r\n            MediaRecorderClass.audioCtx.resume();\r\n            MediaRecorderClass.mediaRecorder.resume();\r\n        }\r\n    }\r\n}\r\nexport default MediaRecorderFn;"]}